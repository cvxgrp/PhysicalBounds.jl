var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [WaveOperators]","category":"page"},{"location":"examples/bend/","page":"Bend Design","title":"Bend Design","text":"The source files for all examples can be found in /examples.","category":"page"},{"location":"examples/bend/","page":"Bend Design","title":"Bend Design","text":"EditURL = \"https://github.com/cvxgrp/PhysicalBounds.jl/blob/main/examples/bend.jl\"","category":"page"},{"location":"examples/bend/#Bend-Design","page":"Bend Design","title":"Bend Design","text":"","category":"section"},{"location":"examples/bend/","page":"Bend Design","title":"Bend Design","text":"We show how to compute a heuristic design for a bend.","category":"page"},{"location":"examples/bend/","page":"Bend Design","title":"Bend Design","text":"# Import packages\nusing WaveOperators, PhysicalBounds, Plots\nusing Random, LinearAlgebra","category":"page"},{"location":"examples/bend/#Constructing-the-design-region","page":"Bend Design","title":"Constructing the design region","text":"","category":"section"},{"location":"examples/bend/","page":"Bend Design","title":"Bend Design","text":"We first have to setup the problem data. For a more detailed walkthrough of this section, checkout the corresponding example in WaveOperators.jl.","category":"page"},{"location":"examples/bend/","page":"Bend Design","title":"Bend Design","text":"n = 40                                  # Number of gridpoints per unit length\nwidth, height = 2, 2                    # Width and height of the domain\nk = 2π                                  # Wavenumber of the domain\ng = Grid(height, width, 1/n, k)\n\n# ----- Defining things inside of the grid -----\n# Add the waveguide slab, centered, of width height/3\ncontrast = 5\nwg_width = height/6\n\n# Add horizontal waveguide\nmidpoint_h, midpoint_w = height/2, width/2\ninput_waveguide = Rectangle((midpoint_h - wg_width/2, 0), (wg_width, width/2))\nset_contrast!(g, input_waveguide, contrast)\n\n# Add vertical waveguide\noutput_waveguide = Rectangle((0, width/2-wg_width/2), (midpoint_h+wg_width/2, wg_width))\nset_contrast!(g, output_waveguide, contrast)\n\n# Add design region\nside_length = height/4\ndesign_region = Rectangle((height/2 - side_length/2, width/2 - side_length/2), (side_length, side_length))\ndesignidx = getindices(g, design_region)\nset_contrast!(g, design_region, contrast)\nheatmap(\n    repeat(g.contrast, inner=(8,8)),\n    interpolate=true,\n    title=\"Design Region\",\n    dpi=300,\n    xaxis=nothing,\n    yaxis=nothing\n)","category":"page"},{"location":"examples/bend/","page":"Bend Design","title":"Bend Design","text":"Now, we add an input field","category":"page"},{"location":"examples/bend/","page":"Bend Design","title":"Bend Design","text":"# Input mode\ninput_mode_line = VerticalLine(0.0)\nadd_mode!(g, input_mode_line, 1)\n\n# Output mode\noutput_mode_line = HorizontalLine(0.0)\noutput_mode = @. sqrt(1 + g.contrast[end, :]) * compute_modes(g, output_mode_line).vectors[:, 2]\n\ng_functions = generate_G(g, design_region, output_mode_line)\n@. g_functions.b_target *= sqrt(1 + g.contrast[end, :])\ng_functions.G_target .= Diagonal(@. sqrt(1 + g.contrast[end, :])) * g_functions.G_target;\nnothing #hide","category":"page"},{"location":"examples/bend/","page":"Bend Design","title":"Bend Design","text":"We can visualize this initial field. We interpolate for a nicer plot.","category":"page"},{"location":"examples/bend/","page":"Bend Design","title":"Bend Design","text":"using Interpolations: LinearInterpolation\nfunction interpolate(img; factor=8, ylims=(0,2), xlims=(0,2))\n    xx = range(xlims..., size(img, 1))\n    yy = range(ylims..., size(img, 2))\n    itp = LinearInterpolation((xx,yy), img)\n    x2 = range(xlims..., size(img, 1)*factor)\n    y2 = range(ylims..., size(img, 2)*factor)\n    return [itp(x, y) for x in x2, y in y2]\nend\n\nsol_initial = WaveOperators.solve(g)\nfield_plt = heatmap(\n    interpolate(\n        Matrix(abs.(sol_initial)) / maximum(abs.(sol_initial));\n        xlims=(0, width),\n        ylims=(0, height)\n    ),\n    dpi=300,\n    title=\"Initial Field\",\n    xaxis=nothing,\n    yaxis=nothing,\n)","category":"page"},{"location":"examples/bend/#Heuristic-deign","page":"Bend Design","title":"Heuristic deign","text":"","category":"section"},{"location":"examples/bend/","page":"Bend Design","title":"Bend Design","text":"We compute a heuristic design using LBFGSB","category":"page"},{"location":"examples/bend/","page":"Bend Design","title":"Bend Design","text":"Random.seed!(0)\nθ₀ = rand((0.0,1.0), length(designidx))\nfstar, θstar = heuristic_solve(LBFGS, g_functions, output_mode; θ₀, λ=Inf, factr=1e11, maxiter=500, maxfun=1000, iprint=0)\n\ndesign = deepcopy(g)\ndesign.contrast[designidx] .*= θstar\nsol_design = WaveOperators.solve(design)\n\ndesign_plt = heatmap(\n    repeat(design.contrast, inner=(8,8)),\n    title=\"Optimal Design\",\n    dpi=300,\n    xaxis=nothing,\n    yaxis=nothing\n)\n\nfield_plt = heatmap(\n    interpolate(\n        Matrix(abs.(sol_design)) / maximum(abs.(sol_design));\n        xlims=(0, width),\n        ylims=(0, height)\n    ),\n    dpi=300,\n    title=\"Realized Field\",\n    xaxis=nothing,\n    yaxis=nothing,\n)","category":"page"},{"location":"examples/bend/","page":"Bend Design","title":"Bend Design","text":"","category":"page"},{"location":"examples/bend/","page":"Bend Design","title":"Bend Design","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"The source files for all examples can be found in /examples.","category":"page"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"EditURL = \"https://github.com/cvxgrp/PhysicalBounds.jl/blob/main/examples/mode-converter.jl\"","category":"page"},{"location":"examples/mode-converter/#Mode-Converter-Bounds-and-Design","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"","category":"section"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"We show how to compute bounds and a heuristic design for a mode converter. This example is similar to that in the numerical experiments section of Bounds on Efficiency Metrics in Photonics. For the exact code used in the paper, please see the paper folder of the Github repo.","category":"page"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"# Import packages\nusing Plots\nusing Random, LinearAlgebra\nusing PhysicalBounds, WaveOperators\nusing JuMP, SCS","category":"page"},{"location":"examples/mode-converter/#Constructing-the-design-region","page":"Mode Converter Bounds and Design","title":"Constructing the design region","text":"","category":"section"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"We first have to setup the problem data. For a more detailed walkthrough of this section, checkout the corresponding example in WaveOperators.jl.","category":"page"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"Note that the number of grid points n in this example is very low so that it can efficienctly run during CI. Basic parameters. n is the number of gridpoints per unit length","category":"page"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"n = 15                                  # Number of gridpoints per unit length\nwidth, height = 2, 1                    # Width and height of the domain\nk = 2π                                  # Wavenumber of the domain\ng = Grid(height, width, 1/n, k)\n\n# ----- Defining things inside of the grid -----\n# Add the waveguide slab, centered, of width height/3\ncontrast = 5\nwaveguide = Slab(height/2, height/3)\nset_contrast!(g, waveguide, contrast)\n\n# Compute the input mode and add it as an input to the grid\nmode_input_position = 0\nmode_number = 1\ninput_line = VerticalLine(mode_input_position)\nmode = add_mode!(g, input_line, mode_number)\n\n# Add the design, centered on the domain, of size d_height, d_width\n# Make the max possible contrast = `contrast`\nd_height = 2*height/3\nd_width = width/2\nx_pos = height/2 - d_height/2\ny_pos = width/2 - d_width/2\n\ndesign_region = Rectangle((x_pos, y_pos), (d_height, d_width))\ndesignidx = getindices(g, design_region)\nset_contrast!(g, design_region, contrast)\n\n\n# ---- Defining the objective -----\n# Make a target line at the right hand side of the domain\ntarget_line = VerticalLine(width)\n\n# Generate the Green's function for the problem\ng_functions = generate_G(g, design_region, target_line)\nmodes = compute_modes(g, target_line)\noutput_mode = 2\nc = @. sqrt(1 + g.contrast[:,end]) * modes.vectors[:, output_mode]\nc ./= norm(c);\nnothing #hide","category":"page"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"We can visualize the design region and the initial field (without a design).","category":"page"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"deisgnidx = getindices(g, design_region)\nheatmap(g.contrast, title=\"Design Region\")\nsol_initial = WaveOperators.solve(g)\nplt_input = heatmap(abs.(sol_initial), title=\"Initial Field\")","category":"page"},{"location":"examples/mode-converter/#Heuristic-deign","page":"Mode Converter Bounds and Design","title":"Heuristic deign","text":"","category":"section"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"First, we use LBFGS-B to find a heuristic design","category":"page"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"# Heuristic solve via LBFGS\nRandom.seed!(0)\nθ₀ = rand(length(designidx))\nfstar, θstar = heuristic_solve(LBFGS, g_functions, c;\n    θ₀=θ₀, factr=1e11, maxiter=500, maxfun=1000, iprint=0)\ndesign = deepcopy(g)\ndesign.contrast[designidx] .*= θstar\nheatmap(design.contrast, title=\"Heuristic Design\")","category":"page"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"We can visualize the resulting field. Note that by only optimizing for purity, we end up with significantly reduced power at the output.","category":"page"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"sol_design = WaveOperators.solve(design)\nheatmap(abs.(sol_design), title=\"Final Field\")","category":"page"},{"location":"examples/mode-converter/#Bound-computed-using-an-SDP.","page":"Mode Converter Bounds and Design","title":"Bound computed using an SDP.","text":"","category":"section"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"We compare the mode purity of our design to the upper bound.","category":"page"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"P, Q, A = PhysicalBounds.construct_matrices(g_functions, c)\nAv = vcat(A, [Q])\nb = vcat(zeros(length(A)), [1.0])\nineq = vcat(trues(length(A)), [false])\nmodel, X = PhysicalBounds.primal_problem_solve(-P, Av, b; ineq, optimizer=SCS.Optimizer())\npurity_bound = -objective_value(model)\npurity = abs(c'*sol_design[:, end])^2 / norm(sol_design[:, end])^2\nprintln(\"Purtity = $purity\")\nprintln(\"Purity bound = $purity_bound\")","category":"page"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"We see that our heuristic design is quite close to the upper bound.","category":"page"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"","category":"page"},{"location":"examples/mode-converter/","page":"Mode Converter Bounds and Design","title":"Mode Converter Bounds and Design","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PhysicalBounds   ","category":"page"},{"location":"#PhysicalBounds","page":"Home","title":"PhysicalBounds","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package contains code to compute bounds on physical devices that are governed by the Helmhotlz equation[1]. To get started, check out the examples!","category":"page"},{"location":"","page":"Home","title":"Home","text":"The figures in Bounds on Efficiency Metrics in Photonics can be reproduced with code in the paper folder of the repository.","category":"page"},{"location":"#Examples:","page":"Home","title":"Examples:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"examples/bend.md\", \"examples/lens.md\", \"examples/mode-converter.md\"]\nDepth = 1","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[1]: Angeris, G., Diamandis, T., Vučković, J., & Boyd, S. (2022). Bounds on Efficiency Metrics in Photonics. arXiv preprint arXiv:2204.05243.","category":"page"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"The source files for all examples can be found in /examples.","category":"page"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"EditURL = \"https://github.com/cvxgrp/PhysicalBounds.jl/blob/main/examples/lens.jl\"","category":"page"},{"location":"examples/lens/#Lens-Bounds-and-Design","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"","category":"section"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"We show how to compute bounds and a heuristic design for a lens.","category":"page"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"# Import packages\nusing Plots\nusing Random, LinearAlgebra\nusing PhysicalBounds, WaveOperators\nusing JuMP, SCS","category":"page"},{"location":"examples/lens/#Constructing-the-design-region","page":"Lens Bounds and Design","title":"Constructing the design region","text":"","category":"section"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"We first have to setup the problem data. For a more detailed walkthrough of this section, checkout the corresponding example in WaveOperators.jl.","category":"page"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"Note that the number of grid points n in this example is very low so that it can efficienctly run during CI.","category":"page"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"n = 15                                  # Number of gridpoints per unit length\nwidth, height = 2, 1                    # Width and height of the domain\nk = 2π                                  # Wavenumber of the domain\ng = Grid(height, width, 1/n, k)\n\n# ----- Defining things inside of the grid -----\n# Add the waveguide slab, centered, of width height/3\ncontrast = 5\nd_height = 2*height/3\nslab = Slab(height/2, d_height)\n\n# Compute the input add it as a current to the grid\ninput_position = 0.0\ninput_line = ShapeSlice(slab, VerticalLine(input_position))\nadd_current!(g, input_line, 1)\n\n# Add the design, centered on the domain, of size d_height, d_width\n# Make the max possible contrast = `contrast`\nd_width = width/4\nx_pos = height/2 - d_height/2\ny_pos = width/2 - d_width/2\n\ndesign_region = Rectangle((x_pos, y_pos), (d_height, d_width))\nset_contrast!(g, design_region, contrast)\n\n\n# ---- Defining the objective -----\n# Make a target line at the right hand side of the domain\nfocal_plane = VerticalLine(width)\nfocus_slab = Slab(height/2, height/3)\nfocal_spot = ShapeSlice(slab, focal_plane)\n\nfocal_spot_idx_set = Set(getindices(g, focal_spot))\nfocal_spot_idx = findall(idx -> idx in focal_spot_idx_set, getindices(g, focal_plane))\n\n# Generate the Green's function for the problem\ng_functions = generate_G(g, design_region, focal_plane);\nnothing #hide","category":"page"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"We can visualize the design region and the initial field (without a design).","category":"page"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"designidx = getindices(g, design_region)\nheatmap(g.contrast, title=\"Design Region\")\nsol_initial = WaveOperators.solve(g)\nplt_input = heatmap(abs.(sol_initial), title=\"Initial Field\")","category":"page"},{"location":"examples/lens/#Heuristic-deign","page":"Lens Bounds and Design","title":"Heuristic deign","text":"","category":"section"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"First, we use LBFGS-B to find a heuristic design","category":"page"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"Random.seed!(0)\nθ₀ = zeros(length(designidx))\nfstar, θstar = heuristic_solve(LBFGS, g_functions, focal_spot_idx;\n    θ₀, factr=0, maxiter=1000, maxfun=1000, iprint=0)\ndesign = deepcopy(g)\ndesign.contrast[designidx] .*= θstar\nheatmap(design.contrast, title=\"Heuristic Design\")","category":"page"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"We can visualize the resulting field.","category":"page"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"sol_design = WaveOperators.solve(design)\nheatmap(abs.(sol_design), title=\"Final Field\")","category":"page"},{"location":"examples/lens/#Bound-computed-using-an-SDP.","page":"Lens Bounds and Design","title":"Bound computed using an SDP.","text":"","category":"section"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"We compare the efficiency of our design to the upper bound.","category":"page"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"P, Q, A = PhysicalBounds.construct_matrices(g_functions, focal_spot_idx)\nAv = vcat(A, [Q])\nb = vcat(zeros(length(A)), [1.0])\nineq = vcat(trues(length(A)), [false])\nmodel, X = PhysicalBounds.primal_problem_solve(-P, Av, b; ineq, optimizer=SCS.Optimizer())\npurity_bound = -objective_value(model)\neff = sum(abs.(sol_design[:, end][focal_spot_idx]).^2) / norm(sol_design[:, end])^2\nprintln(\"Focusing efficiency: $eff\")\nprintln(\"Efficiency bound = $purity_bound\")","category":"page"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"We see that our heuristic design is quite close to the upper bound.","category":"page"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"","category":"page"},{"location":"examples/lens/","page":"Lens Bounds and Design","title":"Lens Bounds and Design","text":"This page was generated using Literate.jl.","category":"page"}]
}
